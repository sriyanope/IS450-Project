<DOC>
ibm applied devops engineering
gain the indemand to advance from programming to devops engineering the latest devops practices tools and technologies from experts at ibm to get jobready in less than monthsalmost every company is looking to become more agile and shorten software development cycles creating a high demand for devops engineers devops professionals are skilled in both software development and operations and have a working knowledge of coding and infrastructure managementthis is ideal for existing software and it professionals who want to level up their careers with modern development practices and it requires knowledge of software engineering fundamentals at least programming language preferably python linux commands and scripts and gitgithubyoull master the latest devops practices agile methodologies and cloud native technologies such as scrum containers docker kubernetes openshift microservices rest serverless test driven development tdd continuous integration and continuous deployment cicd application security and monitoring practice handson with tools used by professionals giving you jobready experiencewhen you complete the have a portfolio of to demonstrate your proficiency and a from ibm also gain access to exclusive support resume building job search and interview prep resourcesapplied projecteach includes handson labs and realworld to build your devops portfolio such ascreating and executing an agile plan using zenhubbuilding and deploying an application with kubernetes and horizontal pod scalingdeveloping a web application with microservices and deploying it on cloud using serverlessa capstone where you write a restful flask microservice and automate its testing with the python nose package while practicing agile principles and deploy using kubernetesopenshift and a tekton cicd pipeline
</DOC>

<DOC>
monitoring and observability for development and devops
application developers and devops professionals must ensure their app works at its best however these app may need help with bugs slow speed or subpar performance professionals need to monitor and observe its performance continuallyapplication monitoring involves identifying measuring and evaluating the effectiveness of an application on the other hand observability refers to how well an app can be monitored by the data obtained from monitoring both monitoring and observability are necessary to gain insights into the system and ensure its proper functioning this thoroughly introduces monitoring and observability covering fundamental concepts and popular tools like prometheus grafana mezmo logdna and instana also about the three pillars of observability and tracing for container applications and gain handson with the opentelemetry framework throughout the complete interactive handson labs to apply your knowledge and gain with the tools and techniques used by software and devops professionals by the end of this be able to demonstrate your knowledge of monitoring and observability and gain the confidence to perform these tasks in a practical setting

introduction to monitoring for applications
be introduced to application monitoring common terms used in monitoring and why monitoring matters to developers also about the types of monitoring that give you visibility into app performance and connected information technology it systems become familiar with the four golden signals of monitoring and to use the golden signals to improve your monitoring systems then explore the differences between the monitoring and evaluation processes that monitoring is a routine ongoing process while evaluation is a longterm process more about the components of monitoring including metrics observability and alerts also explore the importance of tracking hostbased application network and connectivity and server pool metrics finally about the need for application monitoring and its importance
introduction introduction to monitoring types of monitoring golden signals of monitoring difference between monitoring and evaluation components of a monitoring system types of metrics in a monitoring system importance of monitoring

monitoring systems and techniques
about synthetic monitoring and its importance also explore the synthetic monitoring tools their uses as well as features gain insights into how application monitoring allows developers to observe applications and how monitoring can provide valuable insights into application performance about prometheus and the benefits of using an analytics tool also about grafana which is typically used with prometheus explore how a visualization tool like grafana can organize all of your monitoring data additionally discover how the right visualization tool can help your organization and that visualization includes many options like charts graphs and timelines finally about alerting the responsive part of a monitoring system and about the metric log activity log and smart detection alerts
introduction to synthetic monitoring tools of synthetic monitoring introduction to application monitoring introduction to prometheus choosing the right application monitoring tool introduction to grafana using visualization in monitoring alerting in monitoring

methodologies and tools in logging
explore the concept of application logging and its importance discover the benefits of using log monitoring tools and their features further be introduced to distributed logging and tracing techniques also about the key concepts in distributed tracing and the steps to implement distributed logging explore how to implement logging and the different types of logs gain insight into formatting parsing and retention of logs further identify the major reasons to store log data explore the analytical dimensions that suggest how long the retention period for log data should be also about a few best practices for storing logs further explore mezmo its use cases and its features finally be introduced to working with mezmo and the methods for ingesting log data on the mezmo platform
introduction to logging log monitoring tools distributed logging and tracing implementing logging log storage mezmo overview and demo

observability and concepts
about observability its benefits and the three pillars of observability explore the concept of cloud native observability its tools and the pillars of cloud enterprise observability further be introduced to the concept of sampling in logging and its advantages and disadvantages and also about instana and its use cases gain insights into telemetry and explain its importance and benefits discover the working of telemetry and the steps to implement it in application development also differentiate between distributed tracing and telemetry while about popular telemetry and distributed tracing tools explore why tracing for container applications is required and the best practices for implementing tracing in application development
what is observability the pillars of observability cloud native observability cloud native observability tools introduction to sampling ibm instana overview and demo introduction to telemetry telemetry and tracing tools tracing for containerbased applications

final and assessment
complete two practice where be able to apply monitoring and observability using applicable tools in the first part create and set up an instana account to explore the credentials for application and infrastructure monitoring also get the to create an instana dashboard and a website and save their credentials for future use in the next part explore instana to monitor an application named robotshop using docker delve into the process of connecting the robotshop application with instana for efficient monitoring and analysis using docker commands in the terminal establish a seamless connection between the instana dashboard and the robotshop application this handson practice will equip you with the knowledge and to monitor your applications performance effectively and make datadriven decisions to optimize its efficiency
</DOC>

<DOC>
introduction to test and behavior driven development
successful developers need to not only build the right software but build it right to know your software works correctly you need to test each unit of code one of the best methods for this unitlevel testing is test driven development this provides a detailed overview of test driven development tdd first what automated testing is and why it is essential for building robust applications resilient to failure explore the basics of testing including test cases testing levels and the traditional release cycle about tdd and its complement behavior driven development bdd tdd tests individual units of code while bdd tests how these units together then examine tdd in detail explore tdds benefits concepts and popular tools and hone your new testing through handson labs create tdd test cases by writing test assertions and building test fixtures and run these test cases by using the nose testing package then practice more advanced tdd methods such as increasing code coverage generating and using fake data and testing mock objects

introduction to testing
this provides an overview of software testing about the importance of testing through an example the development of the apollo lunar guidance system discover the numerous problems that occur when developers do not test their code then explore the four levels of testing and find out when each appears in the traditional release cycle what test driven and behavior driven development are and why both are essential for effective testing discover the purpose of test cases and witness their value through a demonstration
introduction the importance of testing why developers dont test testing levels and release cycle tdd and bdd testing case study

test driven development
this provides an overview of testdriven development tdd what tdd is and discover the three basic steps in the tdd and redgreenrefactor workflow see why tdd is essential for devops and all automated testing also discover popular testing tools for tdd and closely examine the features of several tools for python this also covers essential methods for performing tdd explore ways to run tdd tests such as pythons builtin test runner unittest and the more featurerich nose about assertions and how to use them to test code discover why you must include happy and sad paths in your test also discover the test fixtures and how to use them to establish an appropriate initial state for each test
benefits of test driven development tools for tdd running tests with nose running tests with nose demo anatomy of a test case writing test assertions writing test assertions demo test fixtures creating an initial state using test fixtures demo

advanced methods for test driven development
this covers advanced methods for tdd about test coverage why its important how to increase it by using test coverage reports and why you should keep testing even at full test coverage discover the value of testing against fake data and how to use factories to generate this data also explore mocking a process for mimicking the behavior of real objects and find out the testing situations for which mocking is useful how to use two common methods for mocking patching a function call and mocking entire objects
test coverage running test cases with coverage demo factories and fakes factories and fakes demo mocking mocking with patch mocking with mock objects mocking with mock objects demo practicing test driven development practicing test driven development demo

behavior driven development
this provides an overview of behavior driven development bdd explore bdd including its benefits for higherlevel automated testing and its typical workflow discover the basics of gherkin syntax a standard syntax for writing bdd specifications about popular bdd tools and how to select the best one for your this also covers essential methods for performing bdd with behave examine how behave uses the code in feature and steps files to test an applications behavior from a users perspective discover how to build a behave environment and control test execution at various levels then explore in detail how to write feature and steps files in addition how to load test data from tables automate web page interactions with selenium and write python functions for testing application behaviors
what is behavior driven development benefits of bdd bdd workflow and gherkin syntax example of bdd tools for behavior driven development overview of behave environment setup writing feature files selenium writing step files loading test data with behave

running behave for behavior driven development
this provides an overview of how to use behave to generate python steps once you know how to generate the steps the workflow for implementing them the next lesson will explain the context variable and how to pass information between python steps in addition discuss the benefits of variable substitution for working with behave and its application in python steps finally practice behavior driven development
generating steps with behave implementing your first steps working with context using variable substitution

final and final exam
final on a final apply many of the technologies and concepts youve learned in the and will create a microservice for a product catalog backend to an ecommerce application the ui of the ecommerce application will be used by administrators to maintain the product catalog this final is divided into two parts in the first part of this use good test driven development practices to create a rest api that allows users to create read update delete and list products by various attributes in the second part of this write behavior driven development scenarios to test that the administrative user interface that has been provided for you behaves as expected finally also attempt a final exam to test the concepts learned
</DOC>

<DOC>
introduction to containers w docker kubernetes openshift
take the next step in your software engineering by getting skilled in container tools and technologies the average salary for jobs that require container is in the us according to salarycom making devops professionals and developers with these highly in demand more than percent of fortune companies are running containerized applications but why using containerization organizations can move applications quickly and seamlessly among desktop onpremises and cloud platforms beginner on containers how to build cloud native applications using current containerization tools and technologies such as docker container registries kubernetes red hat openshift and istio also how to deploy and scale your applications in any public private or hybrid cloud by taking this familiarize yourself with docker objects dockerfile commands container image naming docker networking storage and plugins kubernetes command line interface cli or kubectl to manipulate objects manage workloads in a kubernetes cluster and apply basic kubectl commands replicasets autoscaling rolling updates configmaps secrets and service bindings the similarities and differences between openshift and kubernetes each apply what you in handson browserbased labs by the end of the be able to build a container image then deploy and scale your container the taught are essential to anyone in the fields of software development backend fullstack development cloud architects cloud system engineers devops practitioners site reliability engineers sre cloud networking specialists and many other roles

containers and containerization
start your first by about container concepts features use cases and benefits building on your new knowledge of containers what docker does and discover why docker is a winner with developers what docker is become acquainted with docker processes and explore dockers underlying technology about how developers and organizations can benefit from using docker and see which situations are challenging for using docker next how to build a container image using a dockerfile how to create a running container using that image become familiar with the docker command line interface cli and explore frequently used docker commands become knowledgeable about docker objects dockerfile commands container image naming and how docker uses networks storage and plugins then assimilate this knowledge when you see docker architecture components in action and explore containerization using docker at the end of this first pull an image from a docker hub registry run an image as a container using docker build and tag an image using a dockerfile and push that image to a registry
introduction introduction to containers introduction to docker building and running container images docker objects docker architecture

kubernetes basics
in two what container orchestration is then explore how developers can use container orchestration to create and manage complex container environment development lifecycles kubernetes is currently the most popular container orchestration platform examine key kubernetes architectural components including control plane components and controllers explore kubernetes objects and how specific kubernetes objects such as pods replicasets and deployments then how developers use the kubernetes command line interface cli or kubectl to manipulate objects manage workloads in a kubernetes cluster and apply basic kubectl commands be able to differentiate the benefits and drawbacks of using imperative and declarative commands at the end of this use the kubectl cli commands to create resources on an actual kubernetes cluster at the end of use the kubernetes cli to create a kubernetes pod create a kubernetes deployment create a replicaset and see kubernetes load balancing in action
container orchestration introduction to kubernetes kubernetes architecture kubernetes objects part kubernetes objects part using kubectl

managing applications with kubernetes
in three explore replicasets autoscaling rolling updates configmaps secrets and service bindings and how you can use these capabilities to manage kubernetes applications how replicasets scale applications to meet increasing demand and how autoscaling creates dynamic demandbased scaling see how to use rolling updates to publish application updates and roll back changes without interrupting the user how to use configmaps and secrets to provide configuration variables and sensitive information to your deployments and to keep your code clean at the end of the scale and update applications deployed in kubernetes
replicaset autoscaling rolling updates configmaps and secrets service binding

the kubernetes ecosystem openshift istio etc
in four more about the growing kubernetes ecosystem and explore additional tools that well with kubernetes to support cloudnative development gain an understanding of the similarities and differences between red hat openshift and kubernetes and see what openshift architecture looks like about openshift builds and buildconfigs and openshift build strategies and triggers also discover how operators can deploy whole applications with ease finally examine how the istio service mesh manages and secures traffic and communication between an applications services at the end of the use the oc cli to perform commands on an openshift cluster and use the openshift build capabilities to deploy an application from source code stored in a git repository
introduction to red hat openshift builds operators istio

final
for the final put into practice the tools and concepts learned and deploy a simple guestbook application with docker and kubernetes the entire application will be deployed and managed on openshift
</DOC>

<DOC>
application development using microservices and serverless
welcome to this introductory on microservices and serverless essential technologies for cloud native and application modernization workloads rather than building large applications known as monoliths that perform all the functionality microservices break down larger applications into smaller pieces that are independently maintainable and scalable providing a host of benefits this architecture is now used in the largest software organizations in the world because it provides cost benefits team autonomy and other advantages likewise serverless has emerged as an increasingly popular compute option in the cloud era giving developers and operators the ability to run applications without managing underlying infrastructure create microservices using various methodologies create rest apis using python and flask next the basics of serverless applications and how to run your applications on the ibm cloud code engine the contains several handson labs which allow you to practice and apply the content you in the in the final create a frontend application composed of several microservices and deploy them on the cloud using serverless

introduction to microservices
methodologies to follow while creating microservices the best practices for your applications development deployment and operation stages also understand how microservices allow you to independently design deploy and scale them while avoiding a single point of failure in your architecture and finally get an insight into different antipatterns to avoid while designing microservicesbased applications
introduction twelvefactor app methodology what are microservices comparison of monolith vs soa vs microservices microservices patterns

web api essentials rest api and graphql
about the rest architecture its key characteristics of flexibility uniformity and scalability create your very first rest based api using python and flask use swagger to document it and test it using curl postman and a functionality provided by swagger the importance of api gateways why you need them their advantages especially for abstracting your backend and allowing you to plug additional services
what is rest introduction to api gateway creating rest apis making api requests using curl and postman documenting and testing rest api with swagger optional basics of graphql

serverless overview
the basics of serverless applications and compare them with containers and traditional computing models while looking at the advantages and disadvantages of each also understand the functionasaservice model and its constraints further get an overview of the serverless framework a reference architecture and other use cases and finally about the serverless platforms most commonly used these days
introduction to serverless computing serverless pros and cons introduction to the faas model the serverless framework serverless reference architecture and use cases popular serverless platforms

create and deploy microservices using serverless
about how the ibm cloud code engine builds and deploys your apps in seconds then be introduced to ibm cloud code engines use cases deploy applications build and deploy applications and run jobs next use a dockerfile to build a containerbased application to use the ibm cloud console or ibm cloud cli to perform the application deployment tasks and then deploy it on the ibm cloud code engine
ibm cloud code engine application build and jobs building container images for microservices deploying and running applications updating deployed applications

final
peer review app item plugins

optional openshift essentialsworking with openshift and istio
discover how red hat openshift a container platform for kubernetes helps you automate the provisioning management and scaling of your cloud applications explore what a service mesh is and how service meshes benefit organizations who are using microservices wrap up this with an understanding of microservices on openshift
red hat openshift recap service mesh and istio microservices with openshift red hat marketplace
</DOC>

<DOC>
devops capstone
showcase your devops and software engineering with this handson capstone apply the and techniques you have learned as part of the previous courses in the during the develop test deploy monitor and enhance a secure microservicesbased application on cloud over the of several sprints develop an agile plan by developing user stories and a kanban board using zenhub and github this plan will be implemented to create a restful microservicebased flask application employ test driven development tdd to create and execute tests for the app complete many other tasks like adding functionality using continuous integration ensuring the app is secure and deploy the app on cloud using kubernetes also build an automated cicd pipeline this is the final in the ibm devops engineering it is recommended that you complete all the previous courses before starting this

create and execute sprint plans
before starting this ensure that you have a basic understanding of agile planning and scrum as well as a github account and a zenhub account this focuses on developing an agile plan to create a restful microservice complete this over several sprints using various agile cloudnative and cicd tools and technologies begin by creating a github repository for the and adding this repository to your kanban board next build a user story template in github which later use to write wellstructured user stories then build your product backlog on the kanban board after finishing your product backlog build your sprint plan

develop a restful service using test driven development tdd
complete sprint by configuring the capstone environment and developing the customer account microservice using test driven development tdd start development of the microservice on a new branch on your github repo create tests for the restful flask service and write test cases for the read update delete and list functions to pass these tests as you develop run nosetests to ensure at least coverage as your progresses move the user stories through your kanban board

add continuous integration ci and security to a repository
before starting this ensure that you have completed all the steps described in the handson lab develop your restful service using test driven development in addition you should have a github account and a github repository a basic understanding of yaml familiarity with the syntax for github actions and a basic knowledge of python pip and nosetests in lesson add a continuous integration workflow using github actions which will help you automate the building and testing of your code start by building a plan for sprint in the guided instructional lab sprint planning next in the add continuous integration handson lab configure a github actions workflow that will be triggered when an event occurs in your repository as part of sprint create a workflow that will build and test every push or pull request to your repository be moving the corresponding user stories through your kanban board as your progresses before starting lesson ensure that you have completed all the steps described in the handson lab add continuous integration in addition you should have a basic understanding of security headers crossorigin resource sharing cors policies flasktalisman and flaskcors you should also have a good understanding of test driven development tdd techniques github actions and github operations branching merging committing code pushing code updates and creating pull requests in lesson add secure code practices for the microservice you built by adding flasktalisman for security headers and flaskcors to establish cors policies to begin assign the relevant story created for this task to yourself and start working on a new branch created for this specific task to align with tdd practices first write the test case for the security feature you are trying to implement once you have added flasktalisman for security headers and flaskcors to establish cors policies commit and push your changes to the repository and make a pull request that will kick off the github action move the corresponding user stories through your kanban board as your progresses

deploy your application to kubernetes
before starting this ensure that you have completed all the steps described in the handson lab add security to your restful service in addition you should have a basic understanding of docker and containerization docker commands kubernetes and openshift yaml kubectl and oc commands you should have a github account and a github repository and you should be familiar with the syntax for github actions as part of sprint create a docker image of your microservice and deploy the same to kubernetesopenshift cluster manually first find the containerize your microservice using docker story in the kanban board move it to in progress and assign it to yourself next create the docker file and then use it to build a docker image called accounts deploy this image to kubernetesopenshift as part of the next user story deploy your docker image to kubernetes create new branches for both stories and begin working on them once the tasks are completed commit and push your changes from your local environment to your github repository finally create pull requests and merge your code to the main or master branch move the corresponding user stories through your kanban board as your progresses when you complete a story move it to done and from there to closed

build an automated cd devops pipeline
before starting this ensure that you have completed all the steps described in the handson lab deploy your application to kubernetes in addition you should have a basic understanding of kubernetes and continuous delivery tekton pipeline yaml kubectl and oc commands you should have a github account and a github repository and you should be familiar with the syntax for github actions for the lab automate the deployment to kubernetes using the tekton pipeline so that when the pipeline is triggered the accounts service will be deployed to kubernetes without requiring any manual intervention to start find the user story create a cd pipeline to automate deployment to kubernetes in the kanban board move it from the sprint backlog to in progress and assign it to yourself next create the cd pipeline involving tasks for cloning linting unit testing building and deploying the service to an openshiftkubernetes cluster also create a tekton trigger using the tekton catalog such as a commit to your github repository which will initiate the pipeline run create a new branch for this story and start working on it once the task is completed commit and push your changes from your local environment to your github repository finally create pull requests and merge your code to the main or master branch move the corresponding user stories through your kanban board as your progresses when you complete a story move it to done and from there to closed

final submission and peer review
final complete your submission of screenshots from the handson labs for your peers to review and provide urls for your rest endpoints and github repo links so your peers can review your code once you have completed your submission review and grade one of your peers submissions

final exam
reading
</DOC>

<DOC>
introduction to agile development and scrum
get started with using agile development and scrum with this selfpaced introductory after successfully completing this be able to embrace the agile concepts of adaptive planning iterative development and continuous improvement resulting in early deliveries and value to customers look at scrum as a framework and how to apply it alongside agile also become familiar with related methodologies like waterfall extreme programming xp and kanban apply agile practices derived from lean manufacturing concepts like testdriven development how a scrum team functions also about the importance of agile iterative planning and enable yourself to write good user stories and track your teams progress using a kanban board create and refine a product backlog collaboratively with the team and the customer in a flexible and blameless culture also how to use burndown charts achieve sprint goals and conduct the sprint review and retrospective this approach will lead you to higher levels of efficiency with the ability to plan and execute sprints with your development team measuring success with actionable metrics this is about more than facts and processes it is about working collaboratively on a selforganizing team coached by a scrum master and building what is needed rather than simply following a plan developed and taught by an experienced agile practitioner the includes handson practice through realistic scenariobased labs using github and zenhub the will benefit anyone who wants to get started with working the agile way or transform the organizational culture to adopt and realize the benefits of scrum this includes managers product managers and executives it is particularly suitable for it practitioners such as software developers development managers and it scrum masters

introduction to agile and scrum
be introduced to the philosophy and characteristics of agile about other methodologies including waterfall extreme programming xp and kanban and how they relate to agile explore the five practices of working agile next get an overview of scrum as a framework for applying agile principles to management how scrum benefits the management process by advocating defined roles events and artifacts how companies can organize for success using agile and how team alignment and autonomy contribute to building better systems also how to recognize and avoid agile antipatterns and measure scrum team health
introduction to agile development and scrum agile principles methodologies overview working agile scrum overview the roles of scrum artifacts events and benefits organizational impact of agile mistaking iterative development for agile

agile planning
more details about agile iterative planning also how to create good user stories estimate and assign story points build and refine a product backlog and build a sprint plan for managing the agile plan and user stories you can use the github kanban or if you have an official email account you can create a trial account on zenhub and set up a kanban board
destination unknown agile roles and the need for training kanban and agile planning tools creating good user stories effectively using story points building the product backlog backlog refinement getting started backlog refinement finishing up sprint planning

daily execution
this describes the daily workflow for executing a sprint plan including how to determine which story to on and how to keep the team updated on progress what a daily standup is and how to run one how to use burndown charts to forecast the teams ability to achieve the sprint goal how to conduct the sprint review and the sprint retrospective and find out how to measure success and use actionable metrics to improve the teams performance
workflow for daily plan execution the daily stand up using burndown charts the sprint review the sprint retrospective using measurements effectively getting ready for the next sprint agile antipatterns and health check

optional honors create an agile plan with zenhub
peer review plugins
</DOC>

<DOC>
continuous integration and continuous delivery cicd
a principle of devops is to replace manual processes with automation to improve efficiency reduce human error and accelerate software delivery this requires automation that continuously integrates code changes and continuously delivers those changes to a production environment this introduces you to continuous integration and continuous delivery cicd an automated approach to software development discover the benefits of cicd for creating a devops pipeline and explore popular cicd tools examine the key features of ci explore social coding and the git feature branch workflow also about standard ci tools and gain a deep understanding of github actions workflows and their components this provides an overview of cd and its goals benefits and best practices the requirements of a cicd pipeline and discover standard cd tools explore tekton and discover how its components together to create a cd pipeline how to build a pipeline pass parameters to a pipeline build triggers to start pipeline runs implement reusable tasks and create custom tasks discover how to complete your cd pipeline by building a container image and deploying your application to an openshift kubernetes cluster throughout the you can hone your and challenge yourself through several handson labs

introduction to cicd
welcome to introduction to cicd get a broad introduction to continuous integration and continuous delivery commonly known as cicd cicd is an automated software development and delivery approach that ensures repeatability and reliability throughout this explore the concepts of ci and cd understanding their advantages when implemented correctly in your devops pipeline also study various popular cicd tools recognizing the importance of eliminating manual procedures and acknowledging that different teams within an organization may use other cicd tools additionally gain insights into infrastructure as code iac which involves utilizing code to automate the provisioning and management of infrastructure iac serves as a fundamental concept for implementing automation there are no labs first the goal is to understand what cicd is before we dive deep into each topic individually lets get started
introduction introduction to cicd what is cicd platform and tools infrastructure as code iac

continuous integration ci
welcome to continuous integration this provides you with a comprehensive orientation to continuous integration ci through this gain knowledge of cis features and the benefits it brings to the world of devops we will begin by exploring social coding a widely adopted practice within the opensource community many companies are now adopting this practice for inner source purposes to capitalize on its efficiency levels and other benefits in support of that about the git version control system how to practice the git feature branch workflow and the essential commands required to manage it the workflow will ensure that you follow good devops practices and in small batches so your development never strays too far from the main codebase this workflow offers several other key features along with ensuring adherence to good devops practices and maintaining close alignment with the main codebase we will also explore various popular continuous integration ci tools such as jenkins circleci and travis ci and study their comparison the tool that dive deep into is github actions its a relatively new tool that is rapidly gaining popularity and is available on every github repository well go into great detail on the events runners jobs steps and actions that are the essential components of the github actions workflow through handson labs you can apply your knowledge by forking a repository and establishing your own github actions workflow this workflow will involve tasks such as code examination quality checks unit testing and automatic reporting of code coverage importantly this lab is not a simple hello world exercise it represents a realworld example from one of my personal consequently the knowledge and you acquire during this lab will be directly applicable to your own
continuous integration what is continuous integration ci benefits of continuous integration ci social coding git feature branch workflow working in branches git feature branch workflow making a pull request tools of continuous integration ci github getting started introduction to github actions deeper dive into github actions part deeper dive into github actions part

continuous delivery cd
the begins by introducing tekton and pipelines establishing a foundation for comprehending their roles in the cicd process also the significance of triggers in tekton enabling pipelines to execute automatically based on specific events or conditions through a handson lab create a tekton trigger to initiate pipeline runs in response to external events gain proficiency in effectively utilizing the tekton catalog and incorporating its resources into pipelines the guides you in creating custom tasks for code linting unit testing and other quality assurance processes additionally how to build container images in preparation for deployment to kubernetes through handson labs develop practical to effectively implement tekton pipelines and automate their cicd processes
continuous delivery what is continuous delivery cd continuous delivery key principles continuous delivery practices tools of continuous delivery cd introduction to tekton and pipelines building a tekton pipeline creating tekton triggers leveraging the tekton catalog creating tasks for quality checks and testing building an image deploying to kubernetes

devops and gitops with openshift
welcome to the devops and gitops with openshift understand the devops pipeline and its essential elements that automate the software delivery process explore the components of cicd pipelines and their utilities additionally about openshift pipelines which offer benefits such as seamless integration with kubernetes tools scalability and the ability to leverage openshift services the will also introduce you to gitops an operational framework that combines devops best practices with version control and automation gitops enables efficient deployment and management of infrastructure and application configurations by utilizing gitops as the single source of truth discover the fundamental principles benefits and workflow of gitops including visibility audibility and easy rollback of changes furthermore the will delve into argo cd a tool that plays a crucial role in the gitops ecosystem explore argo cds key concepts and features including its architecture and how it enables continuous delivery and streamlines application deployment processes in kubernetes environments by the end of this have a comprehensive understanding of the devops pipeline cicd components openshift pipelines gitops principles benefits and the critical features of argo cd this knowledge will empower you to automate software delivery manage configurations and streamline deployment processes in modern software development environments
introduction to devops and gitops with openshift components of devops pipeline cicd with openshift pipelines introduction to gitops gitops with argocd

final exam and final
complete a final exam and a final that tests your knowledge of the courses content the exam will include questions on topics including but not limited to cicds principles features benefits tools and methods of implementation the final lab environment will provide you with a sample application and an openshift cluster and be asked to add cicd pipelines using github actions tekton tasks and openshift pipelines
</DOC>

<DOC>
introduction to devops
get started with your devops journey with this beginnerfriendly devops are high in demand and expected to be one of the fastestgrowing in the software industry this is designed to be a first step in obtaining those valuable this selfpaced introductory explores devops as a cultural movement it describes the business case for devops and covers its essentials this teaches new ways of thinking working organizing and measuring to fully realize the benefits of devops by applying devops practices be able to build better products for your users how breaking down silos and organizing developers and operators into single crossfunctional teams is necessary for truly adopting devops having everyone contributing and everyone being responsible for success is at the heart of devops see how building a culture of shared responsibility and transparency is the foundation of every highperforming devops teams how you can use cloud native architecture to build resilience in your products and about helpful devops tools like horizontal scaling and independently deployable microservices explore how agile methodologies like scrum are crucial to devops as well as about continuous integration and continuous delivery cicd which enables frequent deployments and working as a team to create highquality code this concludes with case studies about devopsbased scenarios which analyze and relate to devops concepts learnt throughout this this is designed for those new to devops as well as those looking to increase their current knowledge of devops

overview of devops
how business models are disrupted by innovation and that technology is the enabler of innovation rather than the driver of innovation that devops is more than simply the dev team and the ops team working together it is a cultural change be introduced to the essential characteristics of devops through a brief history of devops see how devops grew as a grassroots movement and that influential people helped others see that devops is a better way to
introduction business case for devops devops adoption definition of devops essential characteristics of devops leading up to devops xp agile and beyond brief history of devops

thinking devops
this is all about thinking devops and getting results how social coding as a community creates better code examine how creating shared repositories and pair programming results in defects found earlier and a broader understanding of the code base for the team see how working in small batches reduces waste and results in delivering useful applications quickly discover how producing a minimum viable product allows you to test a hypothesis and gain valuable feedback about delivering what the customer really desires test driven development will allow you to develop faster and with more confidence behavior driven development results in improved communication and more meaningful information from your stakeholders how cloud native architecture is used to build resilience in your product and take advantage of horizontal scaling and independently deployable microservices failures will happen be able to take advantage of tools that are designed to help you recover quickly from failures
social coding principles git repository guidelines working in small batches minimum viable product test driven development behavior driven development cloud native microservices designing for failure

working devops
this is all about working using devops principles and techniques how software development is more like craftwork than factory and that working in silos leads to mistakes and bottlenecks see how devops is driven by behaviors such as collaboration and embracing change be introduced to concepts such as ephemeral infrastructure that emphasizes building quickly and then discarding when that build is no longer needed a more effective style of in which you make changes to container images and redeploy a new container to take its place instead of patching and maintaining it about new processes such continuous integration and continuous delivery that enable frequent deployments and working as a team to create highquality code how to move faster use automation and spend more time building features and less time debugging during integrations
taylorism and working in silos software engineering vs civil engineering required devops behaviors infrastructure as code continuous integration continuous delivery

organizing for devops
this is all about organizing for devops about the organizational impact of devops how devops teams are structured and the importance of everyone being responsible for success discover the optimal organization for devops teams review a variety of perspectives on devops and explore misconceptions about devops this addresses the importance of consequences that is allowing teams to feel the consequences of their actions on others who are involved in the see how a shared mindset empowers everyone to deliver customer value
organizational impact of devops there is no devops team everyone is responsible for success

measuring devops
this is all about measurements for devops the importance of measuring what matters such as social metrics and continuous improvement goals see how measuring social metrics leads to improved teamwork and how measuring devops metrics allows you to see progress toward your goals discover that actionable metrics help you take action toward your desired one of the key aspects of devops is creating a blameless culture measuring culture is critical for building a culture in which ideas flow openly and people are listened to how that type of working culture can be created see the disadvantages of rewarding one behavior while hoping for a different behavior
rewarding for a while hoping for b vanity metrics vs actionable metrics how to measure your culture comparison of devops to site reliability engineering

case studies and final exam
in these case studies read and analyze devopsbased scenarios apply what you learned in the introduction to devops and answer graded quiz questions based on these scenarios
</DOC>

<DOC>
application security for developers and devops professionals
how vulnerable are your applications to security risks and threats this will help you identify vulnerabilities and monitor the health of your applications and systems examine and implement secure code practices to prevent events like data breaches and leaks and discover how practices like monitoring and observability can keep systems safe and secure gain extensive knowledge on various practices concepts and processes for maintaining a secure environment including devsecops practices that automate security integration across the software development lifecycle sdlc static application security testing sast for identifying security flaws dynamic analysis and dynamic testing also about creating a secure development environment both onpremise and in the cloud explore the open web application security owasp top application security risks including broken access controls and sql injections additionally how monitoring observability and evaluation ensure secure applications and systems discover the essential components of a monitoring system and how application performance monitoring apm tools aid in measuring app performance and efficiency analyze the golden signals of monitoring explore visualization and logging tools and about the different metrics and alerting systems that help you understand your applications and systems through handson labs peer discussion and the practice and graded assessments develop and demonstrate your and knowledge for creating and maintaining a secure development environment

introduction to security for application development
identify how security fits into your workflow and gain a working knowledge of security concepts and terminology discover how to design for security in the software development lifecycle sdlc and find out about a set of practices known as devsecops also discover the osi model identify the necessary osi layers for developers and implement security measures on the four layers of application development gain insights into security patterns and how to organize them describe tls transport layer security and ssl secure sockets layer identify how to keep tls secure in the sdlc and explore openssl and its purpose the strategies best practices and methodologies for getting security early into your code to protect applications against threats and vulnerabilities further find out how you can use tools like vulnerability scanners and threat models to mitigate security vulnerabilities also get the to add key terms like authentication encryption and integrity to your security vocabulary finally also perform handson labs to encrypt and decrypt files using openssl and scan a network environment with nmap
introduction security by design what is devsecops the osi model securing layers for application development security patterns tlsssl what is openssl vulnerability scanning and threat modeling threat monitoring security concepts and terminology

security testing and mitigation strategies
the key mitigation strategies to secure your application throughout development and production also discover a range of security testing methods like static analysis dynamic analysis vulnerability analysis software component analysis and continuous security analysis explore ways to perform code review and ensure runtime protection for application development also perform handson labs based on static analysis dynamic analysis vulnerability scanning and vulnerability detection
introduction to security testing and mitigation strategies static analysis dynamic analysis code review vulnerability analysis demo evaluating vulnerability analysis runtime protection software component analysis continuous security analysis

owasp application security risks
about the open web application security owasp and its top security concerns about application vulnerabilities and discover the top vulnerabilities concerning security experts and professionals explore sql injection crosssite scripting and storing secrets securely also investigate software and data integrity failures discover how to detect these types of vulnerabilities and examine ways to mitigate their impact also perform handson labs to analyze your code repository using snyk and use the vault python api hvac to read write and delete keyvalue secrets in vault
intro to owasp top sec vulnerabilities owasp top owasp top owasp top demo snyk sast free tool sql injections other types of sql injection attacks demo example of an sql injection cross site scripting storing secrets securely

security best practices final and assessment
about coding best practices and software dependencies also explore how to secure a development environment by deciding what to store in a centralized repository and what not to store in github also perform handson labs to create http security headers using flasktalisman and safely store and retrieve secrets using the pass cli commandlineinterface as your final check your code on github for vulnerabilities in order of severity and fix the vulnerabilities apply the best practices for reducing the risk of vulnerability
code practices dependencies secure development environment
</DOC>

