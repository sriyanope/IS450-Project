<DOC>
data structures and algorithms
computer science legend donald knuth once said i dont understand things unless i try to them we also believe that the best way to an algorithm is to it however many excellent books and online courses on algorithms that excel in introducing algorithmic ideas have not yet succeeded in teaching you how to implement algorithms the crucial computer science that you have to master at your next job interview we tried to fill this gap by forming a diverse team of instructors that includes worldleading experts in theoretical and applied algorithms at ucsd daniel kane alexander kulikov and pavel pevzner and a former software engineer at google neil rhodes this unique combination of makes this different from other excellent moocs on algorithms that are all developed by theoretical computer scientists while these moocs focus on theory our is a mix of algorithmic theorypracticeapplications with software engineering algorithms by implementing nearly coding problems in a programming language of your choice to the best of knowledge no other online in algorithms comes close to offering you a wealth of programming challenges and puzzles that you may face at your next job interview we invested over hours into designing our challenges as an alternative to multiple choice questions that you usually find in moocs applied projectthe contains two realworld big networks and genome assembly analyze both road networks and social networks and will how to compute the shortest route between new york and san francisco times faster than the shortest path algorithms you in the standard algorithms afterwards how to assemble genomes from millions of short fragments of dna and how assembly algorithms fuel recent developments in personalized medicine
</DOC>

<DOC>
data structures
a good algorithm usually comes together with a set of good data structures that allow the algorithm to manipulate the data efficiently online we consider the common data structures that are used in various computational problems how these data structures are implemented in different programming languages and will practice implementing them in our programming this will help you to understand what is going on inside a particular builtin implementation of a data structure and what to expect from it also typical use cases for these data structuresa few examples of questions that we are going to cover class are the following what is a good strategy of resizing a dynamic array how priority queues are implemented in c java and python how to implement a hash table so that the amortized running time of all operations is o on average what are good strategies to keep a binary tree balanced also how services like dropbox manage to upload some large files instantly and to save a lot of storage space

basic data structures
about the basic data structures used throughout the rest of this we start this by looking in detail at the fundamental building blocks arrays and linked lists from there we build up two important data structures stacks and queues next we look at trees examples of how theyre used in computer science how theyre implemented and the various ways they can be traversed once youve completed this be able to implement any of these data structures as well as have a solid understanding of the costs of the operations as well as the tradeoffs involved in using each data structure
arrays singlylinked lists doublylinked lists stacks queues trees tree traversal

dynamic arrays and amortized analysis
we discuss dynamic arrays a way of using arrays when it is unknown aheadoftime how many elements will be needed here we also discuss amortized analysis a method of determining the amortized cost of an operation over a sequence of operations amortized analysis is very often used to analyse performance of algorithms when the straightforward analysis produces unsatisfactory results but amortized analysis helps to show that the algorithm is actually efficient it is used both for dynamic arrays analysis and will also be used in the end of this to analyze splay trees
dynamic arrays amortized analysis aggregate method amortized analysis bankers method amortized analysis physicists method amortized analysis

priority queues and disjoint sets
we start this by considering priority queues which are used to efficiently schedule jobs either in the context of a computer operating system or in real life to sort huge files which is the most important building block for any big data processing algorithm and to efficiently compute shortest paths in graphs which is a topic we will cover in our next for this reason priority queues have builtin implementations in many programming languages including c java and python we will see that these implementations are based on a beautiful idea of storing a complete binary tree in an array that allows to implement all priority queue methods in just few lines of code we will then switch to disjoint sets data structure that is used for example in dynamic graph connectivity and image processing we will see again how simple and natural ideas lead to an implementation that is both easy to code and very efficient by completing this be able to implement both these data structures efficiently from scratch
introduction naive implementations of priority queues binary trees basic operations complete binary trees pseudocode heap sort building a heap final remarks overview naive implementations trees for disjoint sets union by rank path compression analysis optional

hash tables
about very powerful and widely used technique called hashing its applications include implementation of programming languages file systems pattern search distributed keyvalue storage and many more how to implement data structures to store and modify sets of objects and mappings from one type of objects to another one see that naive implementations either consume huge amount of memory or are slow and then to implement hash tables that use linear memory and in o on average in the end how hash functions are used in modern disrtibuted systems and how they are used to optimize storage of services like dropbox google drive and yandex disk
applications of hashing analysing service access logs direct addressing hash functions chaining chaining implementation and analysis hash tables phone book data structure universal family hashing phone numbers hashing names analysis of polynomial hashing find substring in text rabinkarps algorithm recurrence for substring hashes improving running time julias diary julias bank blockchain merkle tree

binary search trees
we study binary search trees which are a data structure for doing searches on dynamically changing ordered sets about many of the difficulties in accomplishing this task and the ways in which we can overcome them in order to do this need to the basic structure of binary search trees how to insert and delete without destroying this structure and how to ensure that the tree remains balanced
introduction search trees basic operations balance avl trees avl tree implementation split and merge

binary search trees
we continue studying binary search trees we study a few nontrivial applications we then study the new kind of balanced search trees splay trees they adapt to the queries dynamically and are optimal in many ways
applications splay trees introduction splay trees implementation optional splay trees analysis
</DOC>

<DOC>
advanced algorithms and complexity
in previous courses of our online youve learned the basic algorithms and now you are ready to step into the area of more complex problems and algorithms to solve them advanced algorithms build upon basic ones and use new ideas we will start with networks flows which are used in more typical applications such as optimal matchings finding disjoint paths and flight scheduling as well as more surprising ones like image segmentation in computer vision we then proceed to linear programming with applications in optimizing budget allocation portfolio optimization finding the cheapest diet satisfying all requirements and many others next we discuss inherently hard problems for which no exact good solutions are known and not likely to be found and how to solve them in practice we finish with a soft introduction to streaming algorithms that are heavily used in big data processing such algorithms are usually designed to be able to process huge datasets without being able even to store a dataset

flows in networks
network flows show up in many real world situations in which a good needs to be transported across a network with limited capacity you can see it when shipping goods across highways and routing packets across the internet unit we will discuss the mathematical underpinnings of network flows and some important flow algorithms we will also give some surprising examples on seemingly unrelated problems that can be solved with our knowledge of network flows
introduction network flows residual networks maxflowmincut the fordfulkerson algorithm slow example the edmondskarp algorithm bipartite matching image segmentation

linear programming
linear programming is a very powerful algorithmic tool essentially a linear programming problem asks you to optimize a linear function of real variables constrained by some system of linear inequalities this is an extremely versatile framework that immediately generalizes flow problems but can also be used to discuss a wide variety of other problems from optimizing production procedures to finding the cheapest way to attain a healthy diet surprisingly this very general framework admits efficient algorithms unit we will discuss some of the importance of linear programming problems along with some of the tools used to solve them
introduction linear programming linear algebra method of substitution linear algebra gaussian elimination convexity duality optional duality proofs linear programming formulations the simplex algorithm optional the ellipsoid algorithm

npcomplete problems
although many of the algorithms youve learned so far are applied in practice a lot it turns out that the world is dominated by realworld problems without a known provably efficient algorithm many of these problems can be reduced to one of the classical problems called npcomplete problems which either cannot be solved by a polynomial algorithm or solving any one of them would win you a million dollars see millenium prize problems and eternal worldwide fame for solving the main problem of computer science called p vs np its good to know this before trying to solve a problem before the tomorrows deadline although these problems are very unlikely to be solvable efficiently in the nearest future people always come up with various workarounds study the classical npcomplete problems and the reductions between them also practice solving large instances of some of these problems despite their hardness using very efficient specialized software based on tons of research in the area of npcomplete problems
brute force search search problems traveling salesman problem hamiltonian cycle problem longest path problem integer linear programming problem independent set problem p and np reductions showing npcompleteness independent set to vertex cover sat to independent set sat to sat circuit sat to sat all of np to circuit sat using satsolvers

coping with npcompleteness
after the previous you might be sad youve just went through courses in algorithms only to that they are not suitable for most realworld problems however dont give up yet people are creative and they need to solve these problems anyway so in practice there are often ways to cope with an npcomplete problem at hand we first show that some special cases on npcomplete problems can in fact be solved in polynomial time we then consider exact algorithms that find a solution much faster than the brute force algorithm we conclude with approximation algorithms that in polynomial time and find a solution that is close to being optimal
introduction sat sat algorithm independent sets in trees sat backtracking sat local search tsp dynamic programming tsp branch and bound vertex cover metric tsp tsp local search

streaming algorithms optional
in most previous lectures we were interested in designing algorithms with fast eg small polynomial runtime and assumed that the algorithm has random access to its input which is loaded into memory in many modern applications in big data analysis however the input is so large that it cannot be stored in memory instead the input is presented as a stream of updates which the algorithm scans while maintaining a small of the stream seen so far this is precisely the setting of the streaming model of computation which we study lecture the streaming model is wellsuited for designing and reasoning about small space algorithms it has received a lot of attention in the literature and several powerful algorithmic primitives for computing basic stream statistics model have been designed several of them impacting the practice of big data analysis lecture we will see one such algorithm countsketch a small space algorithm for finding the top k most frequent items in a data stream
introduction heavy hitters problem reduction reduction basic estimate basic estimate final algorithm final algorithm proofs proofs
</DOC>

<DOC>
genome assembly programming challenge
in spring thousands of people in germany were hospitalized with a deadly disease that started as food poisoning with bloody diarrhea and often led to kidney failure it was the beginning of the deadliest outbreak in recent history caused by a mysterious bacterial strain that we will refer to as e coli x soon german officials linked the outbreak to a restaurant in lbeck where nearly of the patrons had developed bloody diarrhea in a single at this point biologists knew that they were facing a previously unknown pathogen and that traditional methods would not suffice computational biologists would be needed to assemble and analyze the genome of the newly emerged pathogento investigate the evolutionary origin and pathogenic potential of the outbreak strain researchers started a crowdsourced research they released bacterial dna sequencing data from one of a patient which elicited a burst of analyses carried out by computational biologists on four continents they even used github for the httpsgithubcomehecoutbreakcrowdsourcedbgidataanalysiswiki the german outbreak represented an early example of epidemiologists collaborating with computational biologists to stop an outbreak online follow in the footsteps of the bioinformaticians investigating the outbreak by developing a to assemble the genome of the e coli x from millions of overlapping substrings of the ecoli x genome

the european e coli outbreak
in april hundreds of people in germany were hospitalized with a deadly disease that often started as food poisoning with bloody diarrhea it was the beginning of the deadliest outbreak in recent history caused by a mysterious bacterial strain that we will refer to as e coli x within a few months the outbreak had infected thousands and killed people to prevent the further spread of the outbreak computational biologists all over the world had to answer the question what is the genome sequence of e coli x in order to figure out what new genes it acquired to become pathogenic the german outbreak represented an early example of epidemiologists collaborating with computational biologists to stop an outbreak genome assembly programming challenge follow in the footsteps of the bioinformaticians investigating the outbreak by developing a to assemble the genome of the deadly e coli x strain however before you embark on building a for assembling the e coli x strain we have to explain some genomic concepts and warm you up by having you solve a simpler problem of assembling a small virus
european e coli outbreak assembling phage genome

assembling genomes using de bruijn graphs
dna sequencing approach that led to assembly of a small virus in went through a series of transformations that contributed to the emergence of personalized medicine a few years ago by the late s biologists were routinely sequencing viral genomes containing hundreds of thousands of nucleotides but the idea of sequencing a bacterial let alone the human genome containing millions or even billions of nucleotides remained preposterous and would cost billions of dollars in three biologists independently and simultaneously came up with an idea to reduce sequencing cost and proposed the futuristic and at the time completely implausible method of dna arrays none of these three biologists could have possibly imagined that the implications of his own experimental research would eventually bring him facetoface with challenging algorithmic problems about the algorithmic challenge of dna sequencing using information about short kmers provided by dna arrays also travel to the the century to about the bridges of konigsberg and solve a related problem of assembling a jigsaw puzzle
dna arrays assembling genomes from kmers de bruijn graphs bridges of knigsberg and universal strings euler theorem

genome assembly faces real sequencing data
our discussion of genome assembly has thus far relied upon various assumptions we will face practical challenges introduced by quirks in modern sequencing technologies and discuss some algorithmic techniques that have been devised to address these challenges afterwards assemble the smallest bacterial genome that lives symbiotically inside leafhoppers its sheltered life has allowed it to reduce its genome to only about nucleotides and genes and afterwards be ready to assemble the e coli x genome
splitting the genome into contigs from reads to readpairs genome assembly faces real sequencing data
</DOC>

<DOC>
algorithms on strings
world and internet is full of textual information we search for information using textual queries we read websites books emails all those are strings from the point of view of computer science to make sense of all that information and make search efficient search engines use many string algorithms moreover the emerging field of personalized medicine uses many search algorithms to find diseasecausing mutations in the human genome online key pattern matching concepts tries suffix trees suffix arrays and even the burrowswheeler transform

suffix trees
how would you search for a longest repeat in a string in linear time in peter weiner came up with a surprising solution that was based on suffix trees the key data structure in pattern matching computer scientists were so impressed with his algorithm that they called it the algorithm of the year lesson we will explore some key ideas for pattern matching that will through a series of trials and errors bring us to suffix trees
welcome from genome sequencing to pattern matching brute force approach to pattern matching herding patterns into trie herding text into suffix trie suffix trees

burrowswheeler transform and suffix arrays
although exact pattern matching with suffix trees is fast it is not clear how to use suffix trees for approximate pattern matching in michael burrows and david wheeler invented an ingenious algorithm for text compression that is now known as burrowswheeler transform they knew nothing about genomics and they could not have imagined that years later their algorithm will become the workhorse of biologists searching for genomic mutations but what text compression has to do with pattern matching lesson that the fate of an algorithm is often hard to predict its applications may appear in a field that has nothing to do with the original plan of its inventors
burrowswheeler transform inverting burrowswheeler transform using bwt for pattern matching suffix arrays approximate pattern matching

knuthmorrispratt algorithm
congratulations you have now learned the key pattern matching concepts tries suffix trees suffix arrays and even the burrowswheeler transform however some of the results pavel mentioned remain mysterious eg how can we perform exact pattern matching in otext time rather than in otextpattern time as in the nave brute force algorithm how can it be that matching a nucleotide pattern against the human genome is nearly as fast as matching a nucleotide pattern also even though pavel showed how to quickly construct the suffix array given the suffix tree he has not revealed the magic behind the fast algorithms for the suffix tree constructionin this mihael will address some algorithmic challenges that pavel tried to hide from you such as the knuthmorrispratt algorithm for exact pattern matching and more efficient algorithms for suffix tree and suffix array construction
exact pattern matching skipping positions safe shift prefix function computing prefix function implementation analysis knuthmorrispratt algorithm

constructing suffix arrays and suffix trees
we continue studying algorithmic challenges of the string algorithms an on log n algorithm for suffix array construction and a linear time algorithm for construction of suffix tree from a suffix array also implement these algorithms and the knuthmorrispratt algorithm in the last programming
suffix array general construction strategy initialization sort doubled cyclic shifts sortdouble implementation updating classes updateclasses implementation building suffix array suffix array and suffix tree lcp array computing the lcp array computelcparray implementation analysis constructing suffix tree implementation analysis
</DOC>

<DOC>
algorithmic toolbox
this online covers basic algorithmic techniques and ideas for computational problems arising frequently in practical applications sorting and searching divide and conquer greedy algorithms dynamic programming we will a lot of theory how to sort data and how it helps for searching how to break a large problem into pieces and solve them recursively when it makes sense to proceed greedily how dynamic programming is used in genomic studies practice solving computational problems designing new algorithms and implementing solutions efficiently so that they run in less than a second

programming challenges
welcome to the first of data structures and algorithms here we will provide an overview of where algorithms and data structures are used hint everywhere and walk you through a few sample programming challenges the programming challenges represent an important and often the most difficult part of this because the only way to fully understand an algorithm is to implement it writing correct and efficient programs is hard please dont be surprised if they dont as you plannedour first programs did not either we will help you on your journey through the by showing how to implement your first programming challenges we will also introduce testing techniques that will help increase your chances of passing on your first attempt in case your does not as intended we will show how to fix it even if you dont yet know which test your implementation is failing on
welcome solving the sum of two digits programming challenge screencast solving the maximum pairwise product programming challenge improving the naive solution testing debugging stress test implementation stress test find the test and debug stress test more testing submit and pass

algorithmic warmup
that programs based on efficient algorithms can solve the same problem billions of times faster than programs based on nave algorithms how to estimate the running time and memory of an algorithm without even implementing it armed with this knowledge be able to compare various algorithms select the most efficient ones and finally implement them as our programming challenges
why study algorithms coming up problem overview naive algorithm efficient algorithm problem overview and naive algorithm efficient algorithm computing runtimes asymptotic notation bigo notation using bigo overview

greedy algorithms
about seemingly nave yet powerful class of algorithms called greedy algorithms after the key idea behind the greedy algorithms you may feel that they represent the algorithmic swiss army knife that can be applied to solve nearly all programming challenges but be warned with a few exceptions that we will cover this intuitive idea rarely works in practice for this reason it is important to prove that a greedy algorithm always produces an optimal solution before using this algorithm in the end of this we will test your intuition and taste for greedy algorithms by offering several programming challenges
largest number queue of patients implementation and analysis main ingredients of greedy algorithms celebration party problem greedy algorithm implementation and analysis maximizing loot implementation and analysis review

divideandconquer
about a powerful algorithmic technique called divide and conquer based on this technique see how to search huge databases millions of times faster than using nave linear search even that the standard way to multiply numbers that you learned in the grade school is far from the being the fastest we will then apply the divideandconquer technique to design two efficient algorithms merge sort and quick sort for sorting huge lists a problem that finds many applications in practice finally we will show that these two algorithms are optimal that is no algorithm can sort faster
intro linear search binary search binary search runtime problem overview and nave solution nave divide and conquer algorithm faster divide and conquer algorithm what is the master theorem proof of the master theorem problem overview selection sort merge sort lower bound for comparison based sorting noncomparison based sorting algorithms overview algorithm random pivot running time analysis optional equal elements final remarks

dynamic programming
final of the about the powerful algorithmic technique for solving many optimization problems called dynamic programming it turned out that dynamic programming can solve many problems that evade all attempts to solve them using greedy or divideandconquer strategy there are countless applications of dynamic programming in practice from maximizing the advertisement revenue of a tv station to search for similar internet pages to gene finding the problem where biologists need to find the minimum number of mutations to transform one gene into another how the same idea helps to automatically make spelling corrections and to show the differences between two versions of the same text
change problem the alignment game computing edit distance reconstructing an optimal alignment

dynamic programming
we continue practicing implementing dynamic programming solutions
problem overview knapsack with repetitions knapsack without repetitions final remarks problem overview subproblems algorithm reconstructing a solution
</DOC>

<DOC>
algorithms on graphs
if you have ever used a navigation service to find optimal route and estimate time to destination youve used algorithms on graphs graphs arise in various realworld situations as there are road networks computer networks and most recently social networks if youre looking for the fastest time to get to cheapest way to connect a set of computers into a network or efficient algorithm to automatically find communities and opinion leaders in facebook youre going to with graphs and algorithms on graphsin this online first what a graph is and what are some of the most important properties then several ways to traverse graphs and how you can do useful things while traversing the graph in some order we will then talk about shortest paths algorithms from the basic ones to those which open door for times faster algorithms used in google maps and other navigational services use these algorithms if you choose to on our fast shortest routes industrial capstone we will finish with minimum spanning trees which are used to plan road telephone and computer networks and also find applications in clustering and approximate algorithms

decomposition of graphs
graphs arise in various realworld situations as there are road networks computer networks and most recently social networks if youre looking for the fastest time to get to cheapest way to connect set of computers into a network or efficient algorithm to automatically find communities and opinion leaders hot in facebook youre going to with graphs and algorithms on graphs ways to represent a graph as well as basic algorithms for decomposing graphs into parts in the programming of this apply the algorithms that youve learned to implement efficient programs for exploring mazes analyzing computer science curriculum and analyzing road networks in the first of the we focus on undirected graphs
graph basics representing graphs exploring graphs connectivity previsit and postvisit orderings

decomposition of graphs
we continue to study graph decomposition algorithms but now for directed graphs
directed acyclic graphs topological sort strongly connected components computing strongly connected components

paths in graphs
study algorithms for finding shortest paths in graphs these algorithms have lots of applications when you launch a navigation app on your smartphone like google maps or yandexnavi it uses these algorithms to find you the fastest route from to home from home to school etc when you search for airplane tickets these algorithms are used to find a route with the minimum number of plane changes unexpectedly these algorithms can also be used to determine the optimal way to do currency exchange sometimes allowing to earh huge profit we will cover all these applications and breadthfirst search dijkstras algorithm and bellmanford algorithm these algorithms are efficient and lay the foundation for even more efficient algorithms which and implement in the shortest paths capstone to find best routes on real maps of cities and countries find distances between people in social networks in the end be able to find shortest paths efficiently in any graph we will study breadthfirst search algorithm
applications paths and distances breadthfirst search breadthfirst search continued implementation and analysis bfs properties correct distances shortest path tree

paths in graphs
we continue to study shortest paths in graphs dijkstras algorithm which can be applied to find the shortest route home from also bellmanfords algorithm which can unexpectedly be applied to choose the optimal way of exchanging currencies by the end be able to find shortest paths efficiently in any graph
fastest route naive algorithm dijkstras algorithm dijkstra example implementation proof of correctness analysis currency exchange reduction to shortest paths bellmanford algorithm proof of correctness negative cycles infinite arbitrage

minimum spanning trees
we study the minimum spanning tree problem we will cover two elegant greedy algorithms for this problem the first one is due to kruskal and uses the disjoint sets data structure the second one is due to prim and uses the priority queue data structure in the programming for this be computing an optimal way of building roads between cities and an optimal way of partitioning a given set of objects into clusters a fundamental problem in data mining
building a network greedy algorithms cut property kruskals algorithm prims algorithm

advanced shortest paths optional
advanced shortest paths algorithms that in practice s up to of times faster than the classical dijkstras algorithm on realworld road networks and social networks graphs on a programming based on these algorithms find the shortest paths on the real maps of parts of us and the shortest paths connecting people in the social networks we encourage you not only to use the ideas from this lectures in your implementations but also to come up with your own ideas for speeding up the algorithm we encourage you to compete on the forums to see whose implementation is the fastest one
programming introduction bidirectional search six handshakes bidirectional dijkstra finding shortest path after meeting in the middle computing the distance a algorithm performance of a bidirectional a potential functions and lower bounds landmarks optional highway hierarchies and node importance preprocessing witness search query proof of correctness node ordering
</DOC>

