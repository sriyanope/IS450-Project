<DOC>
accelerated computer science fundamentals
topics covered by this include basic objectoriented programming the analysis of asymptotic algorithmic run times and the implementation of basic data structures including arrays hash tables linked lists trees heaps and graphs as well as algorithms for traversals rebalancing and shortest paths this sequence is designed to help prospective applicants prepare for the flexible and affordable online master of computer science mcs and mcs in data scienceopens in a new tabapplied projectstudents will solve weekly challenge problems by implementing fragments of c code in a webbased interface each also features two longerformat coding where students will follow instructions to complete a c that performs tasks such as editing images efficiently manipulating data structures or solving a graph search problem
</DOC>

<DOC>
ordered data structures
new data structures for efficiently storing and retrieving data that is structured in an ordered sequence such data includes an alphabetical list of names a family tree a calendar of events or an inventory organized by part numbers the specific data structures covered by this include arrays linked lists queues stacks trees binary trees avl trees btrees and heaps this also shows through algorithm complexity analysis how these structures enable the fastest algorithms to search and sort data

orientation linear structures
programming
arrays linked memory run time analysis array and list operations queue data structure stack data structure

introduction to tree structures
reading
tree terminology binary trees tree traversals binary search trees bst analysis

advanced tree structures
reading programming
balanced bst avl analysis btree introduction btree insert btree search

heap structures
reading
heap introduction heap insert heap removemin heap buildheap heap runtime analysis
</DOC>

<DOC>
objectoriented data structures in c
this teaches learners how to write a in the c language including how to set up a development environment for writing and debugging c code and how to implement data structures as c classes it is the first in the accelerated cs fundamentals and subsequent courses will be using c as the language for implementing the data structures covered in class

orientation writing a c
app item discussion prompt
introduction to objectoriented data structures in c overview c introduction c classes cs standard library std

understanding the c memory model
programming
introduction stack memory and pointers heap memory heap memory puzzles

developing c classes

introduction class constructors copy constructors copy operator variable storage class destructor

engineering c software solutions
reading programming app item
introduction template types tower of hanoi introduction tower of hanoi solution tower of hanoi solution templates and classes inheritance
</DOC>

<DOC>
unordered data structures
the unordered data structures covers the data structures and algorithms needed to implement hash tables disjoint sets and graphs these fundamental data structures are useful for unordered data for example a hash table provides immediate access to data indexed by an arbitrary key value that could be a number such as a memory address for cached memory a url such as for a web cache or a dictionary graphs are used to represent relationships between items and this covers several different data structures for representing graphs and several different algorithms for traversing graphs including finding the shortest route from one node to another node these graph algorithms will also depend on another concept called disjoint sets so this will also cover its data structure and associated algorithms

orientation hashing
programming
lesson hashing introduction lesson hashing hash function lesson hashing hash function examples lesson collision handling i separate chaining lesson collision handling ii probing and double hashing lesson hashing analysis lesson hash tables in c

disjoint sets

disjoint sets introduction disjoint sets naive implementation disjoint sets uptrees a better implementation uptrees simple running time a uptrees smart union path compression i b uptrees smart union path compression ii

graph data structures
reading programming
graphs introduction graphs vocabulary graphs edge list implementation graphs adjacency matrix implementation graphs adjacency list implementation

graph algorithms
reading
graphs bfs traversal graphs bfs analysis graphs dfs traversal minimum spanning trees mst introduction mst kruskals algorithm i mst kruskals algorithm ii mst prims algorithm graphs dijkstras algorithm graphs dijkstras edge cases graphs dijkstras running time graphs landmark path problem
</DOC>

