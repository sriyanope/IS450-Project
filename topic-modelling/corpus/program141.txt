<DOC>
fpga design for embedded systems
the objective of this is to acquire proficiency with field programmable gate arrays fpgas for the purpose of creating prototypes or products for a variety of applications although fpga design can be a complex topic we will introduce it so that with a little bit of effort the basic concepts will be easily learned while also providing a challenge for the more experienced designer we will explore complexities capabilities and trends of field programmable gate arrays fpga and complex programmable logic devices cpld conception design implementation and debugging will be practiced we will specifics around embedded ip and processor cores including tradeoffs between implementing versus acquiring ip will involve the latest software and fpga development tools and hardware platforms to help develop a broad perspective of the capabilities of various programmable soc solutions topics includeverilog vhdl and rtl design for fpga and cpld architectures fpga development tools flow specify synthesize simulate compile and debug configurable embedded processors and embedded softwareuse of softcore and hardcore processors and os optionsfpga system engineering softwarehardware integration and testing ip development and incorporating rdparty ip the capstone will give the learner the to practice and implement the concepts covered by building fpga systems based on low cost evaluation boardsapplied projectlearners will practice building and testing several fpga using industry standard fpga hardware development tools by applying including vhdl and verilog coding programmable logic synthesis and simulation static timing analysis and fpga device programming the culmination of these efforts will be the construction of a configurable softcore processor system on a chip using the delite evaluation board
</DOC>

<DOC>
fpga softcore processors and ip acquisition
this will introduce you to all aspects of development of soft processors and intellectual property ip in fpga design the extent of soft processor types and capabilities how to make your own soft processor in and fpga including how to design the hardware and the software for a soft processor how to add ip blocks and custom instructions to your soft processor after the soft processor is made you how to verify the design using simulation and an internal logic analyzer once complete know how to create and use soft processors and ip a very useful this consists of approximately per for weeks each will include an hour or two of lectures reading discussion prompts and an end of assessment

softcore processor development flow
this introduces the concept of a soft processor in general and of hardware design for the soft processor in particular it presents an overview of soft processors describing all the different kinds that are available from xilinx altera microsemi and lattice and then goes into depth about the nios ii soft processor from altera the benefits of using soft processors to prevent obsolescence and provide flexibility are explained the content guides you through a hardware design of the nios ii processor using qsys the altera system design tool lastly design of a custom instruction in the nios ii is presented showing the versatility of the soft processor in an fpga
introduction create a soft processor soft processor advantages soft processor flows soft processor architectures part soft processor architectures part ii nios ii development part i nios ii development part platform designer live demo nios ii compilation nios ii customization

writing software for softcore processors
this delves further into the development of soft processors it describes the soft processor development flow in more detail including the tools needed to develop software for the soft processor it then introduces the eclipsebased ide for nios ii software development and then shows how the output of the qsys design is used to establish a board support package bsp for the processor which is necessary because the processor hardware design can be changed and the bsp software library must support any changes use of the bsp editor to configure the processor by programming control registers is demonstrated finally the use of the custom instruction developed in is presented including the use of software macros to complete the implementation of the custom instruction
introduction to software for soft processors software for soft processors introduction to the nios ide c programming for soft processors building c programs programming soft processors memory in the nios ii accessing custom instructions

ip acquisition and integration
modern fpga design is no longer centered on hdl design as it is on acquisition and use of ip cores we will introduce ip cores including offerings from all the major vendors intel altera xilinx microchip microsemi and lattice how to find acquire and use these cores
introduction to ip cores microsemi ip cores intel altera ip cores xilinx ip cores lattice ip cores intel altera ip cores for qsys

introducing modelsim and simulation for verification
as we on more complex fpga designs the challenges to create an errorfree design mount exponentially having a good grasp of the tools needed to verify correctness of design has become more and more important after introducing simulation in previous sessions we will examine simulation with modelsim in more depth by working through some examples this will show the utility of simulation for verification and debugging this will also describe in some detail how the simulator works and how it achieves concurrency through the use of delta delays as a final step in the debugging process the internal logic analyzer signaltap ii is introduced
introducing modelsim and simulation for verification basics of rtl simulation simulation with altera modelsim starting modelsim from quartus prime testbenches for verification designing for simulation simulation for verification logic analysis with signaltap ii
</DOC>

<DOC>
introduction to fpga design for embedded systems
this can also be taken for academic credit as ecea part of cu boulders master of science in electrical engineering degreeprogrammable logic has become more and more common as a core technology used to build electronic systems by integrating softcore or hardcore processors these devices have become complete systems on a chip steadily displacing general purpose processors and asics in particular high performance systems are now almost always implemented with fpgas this will give you the foundation for fpga design in embedded systems along with practical design what an fpga is and how this technology was developed how to select the best fpga architecture for a given application how to use state of the art software tools for fpga development and solve critical digital design problems using fpgas you use fpga development tools to complete several example designs including a custom processor if you are thinking of a in electronics design or an engineer looking at a change this is a great to enhance your hardware requirements you must have access to computer resources to run the development tools a pc running either windows or or a recent linux os which must be rhel or centos linux or later either linux os could be run as a virtual machine under windows or the tools do not run on apple mac computers whatever the os the computer must have at least gb of ram most new laptops will have this or it may be possible to upgrade the memory

whats this programmable logic stuff anyway history and architecture
whats this programmable logic stuff anyway in you about the history and architecture of programmable logic devices including field programmable gate arrays fpgas how to describe the difference between an fpga a cpld an assp and an asic recite the historical development of programmable logic devices and design logic circuits using luts examples will include designs of digital adders and multipliers in fpgas
introduction overview welcome to the world of programmable logic and fpga design a brief history of programmable logic cpld architecture luts and fpga architecture luts for logic design designing adders designing multipliers

fpga design tool flow an example design
in install and use sophisticated fpga design tools to create an example design the steps in the standard fpga design flow how to use intel alteras quartus prime development suite to create a pipelined multiplier and how to verify the integrity of the design using the rtl viewer and by simulation using modelsim using the timequest timing analyzer analyze the timing of your design to achieve timing closure
the fpga design flow installing quartus prime introducing quartus prime create a design in quartus prime create a design in quartus prime compile a design view the rtl timing analysis with time quest i timing analysis with time quest ii simulate a design with modelsim

fpga architectures sram flash and antifuse
fpgas are programmable and the resides in a memory which determines how the logic and routing in the device is configured in the pros and cons of flashbased srambased and antifuse based fpgas a survey of modern fpga architectures will give you the tools to determine which type of fpga is the best fit for a design architectures will be explored from the basic core logic cell up to consideration of large intellectual property ip blocks that are available on many fpgas
many types of fpgas xilinx cpld architecture xilinx small fpgas xilinx large fpgas altera cplds and small fpgas altera large fpgas microsemi singlechip fpga solutions lattice singlechip fpga solutions

programmable logic design using schematic entry design tools
in extend and enhance your design from completing the design by adding ip blocks implementing pin and creating a programming file for the fpga one will be improved design productivity by use of design techniques like pipelining and by the use of system design tools like qsys the system design tool in quartus prime complete a qsys system design by creating a nios ii softcore processor design which quickly gives you the powerful ability to customize a processor to meet your specific needs
fpga design expertise advanced schematic entry for fpga design drawing and hierarchy improving productivity with ip blocks improving timing with pipelining fpga io getting in and getting out pin making them spot on programming the fpga becoming one with q qsys system design a becoming one with q part ii qsys system design finishing touches b becoming one with q part iii qsys system design finishing touches
</DOC>

<DOC>
fpga capstone building fpga
this will give you handson fpga design that uses all the concepts and you have developed up to now need to purchase a delite development kit setup and test the max delite board using the fpga design tool quartus prime and the system builderyou will design and test a binary coded decimal adder design and test a pwm circuit with verification by simulation design and test an adc circuit using quartus prime builtin tools to verify your circuit design create hardware for the nios ii soft processor including many interfaces using qsys platform designer instantiate this design into a toplevel delite hdl file compile your completed hardware using quartus prime enhance and test a working design using most aspects of the quartus prime design flow and the nios ii software build tools sbt for eclipse create software for the nios ii soft processor including many interfaces using qsys platform designer and the sbt compile your completed software using the sbt use quartus prime to both the fpga hardware configuration and software code in you delite development kit record all your observations in a lab notebook pdf submit your files and lab notebook for grading this consists of approximately per for weeks each will include an hour or less of lectures plus reading discussion prompts and that involves creating hardware andor software in the fpga

hands on altera max hardware setup
begin your handson exploration of fpga design by setting up a target board the delite based on the max intel altera fpga setup and test the max board using the fpga design tool quartus prime and the system builder design and test a binary coded decimal adder record all your observations in a lab notebook pdf submit your files and lab notebook for grading completing this will help prepare you for the to be done in the that follow
fpga capstone building fpga introduction capstone starting fpga design board setup and test expected for tips for success

develop a mixed signal system
the goal of this is to develop a mixedsignal system construct hardware that uses the analog to digital converter adc inputs and pulse width modulate pwm outputs to make a voltage measuring instrument create a working design using most aspects of the quartus prime design flow design and test a pwm circuit with verification by simulation design and test an adc circuit using quartus prime builtin tools to verify your circuit design record all your observations in a lab notebook pdf submit your files and lab notebook for grading completing this will help prepare you for the to be done in the that follow
develop a mixed signal system target for

create a system on a chip with nios ii
the goal of this is to develop the hardware for a system on a chip soc construct hardware that creates a nios ii soft processor along with several interfaces to devices on the delite development kit create a working design using most aspects of the quartus prime design flow create hardware for the nios ii soft processor including many interfaces using qsys platform builder instantiate this design into a toplevel delite hdl file compile your completed hardware using quartus prime record all your observations in a lab notebook submit your files and lab notebook for grading completing this will provide a platform for the to be done in the that follows
create a soft processor target for

software for a system on a chip
the goal of this is to develop the software for a system on a chip soc build software for a nios ii soft processor you built in using several interfaces to devices on the delite development kit as well enhance and test a working design using most aspects of the quartus prime design flow and the nios ii software build tools sbt for eclipse create software for the nios ii soft processor including many interfaces using qsys platform builder and the sbt compile your completed software using the sbt use quartus prime to both the fpga hardware configuration and software code in you delite development kit then test your new embedded system record all your observations in a lab notebook pdf submit your files and lab notebook for grading completing this will finish your for this
software for the nios ii what to expect from
</DOC>

<DOC>
hardware languages for fpga design
this can also be taken for academic credit as ecea part of cu boulders master of science in electrical engineering degreehardware languages for logic design enables students to design circuits using vhdl and verilog the most widespread design methods for fpga design it uses natural processes to make the languages easy simple first examples are presented then language rules and syntax followed by more complex examples and then finally use of test bench simulations to verify correctness of the designs lecture presentations are reinforced by many programming example problems so that in the languages is obtained after completing this each student will have fundamental proficiency in both languages and more importantly enough knowledge to continue and gaining expertise in verilog and vhdl on their own

basics of vhdl
this introduces the basics of the vhdl language for logic design it describes the use of vhdl as a design entry method for logic design in fpgas and asics to provide context it shows where vhdl is used in the fpga design flow then a simple example a bit comparator is used as a first phrase in the language vhdl rules and syntax are explained along with statements identifiers and keywords finally use of simulation as a means of testing vhdl circuit designs is demonstrated using modelsim a simulator software tool programming are used to develop and reinforce the concepts presented
introduction to hardware languages for fpga design why vhdl fpga design flow intro to vhdl finite state machine how to speak vhdl first phrases vhdl operators types vhdl rules and syntax interface ports vhdl in modelsim download and install vhdl in modelsim adding to your toolkit submitting vhdl programming

vhdl logic design techniques
use of the vhdl language to perform logic design is explored further many examples of combinatorial and synchronous logic circuits are presented and explained including flipflops counters registers memories tristate buffers and finite state machines methods of hierarchical design and modular design techniques are explained and demonstrated how to create test benches is described as a means for design verification students are giving ample to practice and refined their design technique using the programming
to speak vhdl intro combinatorial circuits synchronous logic latches and flip flops synchronous logic counters and registers buses and tristate buffers modular designs components generate and loops in vhdl test benches in vhdl combinatorial test benches in vhdl synchronous memory in vhdl finite state machines in vhdl

basics of verilog
this introduces the basics of the verilog language for logic design it describes the use of verilog as a design entry method for logic design in fpgas and asics including the history of verilogs development then a simple example a bit comparator is used as a first phrase in the language verilog rules and syntax are explained along with statements operators and keywords finally use of simulation as a means of testing verilog circuit designs is demonstrated using modelsim a simulator tool programming are used to develop and reinforce the concepts presented
verilog for fun and profit intro your first verilog phrase verilog rules and syntax keywords and identifiers sigasiquartus editing verilog statements and operators verilog port modes and data types verilog structure testing with modelsim verilog evaluation submitting verilog programming

verilog and system verilog design techniques
use of the verilog language to perform logic design is explored further many examples of combinatorial and synchronous logic circuits are presented and explained including flipflops counters registers memories tristate buffers and finite state machines methods of hierarchical design and modular design techniques are explained and demonstrated how to create test benches is described as a means for design verification students are giving ample to practice and refined their design technique by writing code as required by the programming
to speak verilog intro combinatorial circuits synchronous logic latches and flip flops synchronous logic counters and registers buses and tristate buffers modular design in verilog testbenches in verilog testbenches in verilog ii memory with verilog verilog finite state machines
</DOC>

